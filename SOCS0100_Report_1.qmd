---
title: "SOCS0100_Report_1"
author: "YIKE LI"
format: html
editor: visual
---

## Introduction
This report is my first assignment for my SOCS0100 course as a UCL BASc student. I investigated global disparities in energy and clean fuel access using data from the World Bank. Key variables in the dataset include "Entity" (representing the country or region), "Year," "Number of people with access to electricity," "Number of people without access to electricity," "Number of people using clean fuels for cooking," and "Number of people without clean fuels for cooking."

By leveraging statistical and visualisation skills of data wrangling, analysis, and visualisation I learnt, I aim to highlightand visualise the differences in energy availability and identify trends that could inform targeted interventions and policy decisions. 

## Rationale Behind My selection of this Dataset
I chose this dataset on energy and clean fuel access because it is critical from a social science perspective as it directly relates to fundamental issues of social equity and development. In specific, energy access is a key determinant of socio-economic well-being, impacting health, education, and economic opportunities. 
Also, the access of clean fuels and electricity in underdeveloped regions have always been unappreciated, therefore, my analysis is significant in understanding how uneven access to energy perpetuates poverty and affects sustainable development, thereby contributing to informed policy discussions on bridging these global disparities.

## Setting Up the Environment
To begin the analysis, I first set the working directory to a folder on my desktop, ensuring all file-related commands would default to this location. Fun fact: I use the alias "felix" as my computer name (and for coffee orders at Starbucks).
```{r}
setwd("/Users/felixli/Desktop/SOCS0100-Assignment-1")
rm(list = ls())
if (!require("pacman")) {
  install.packages("pacman")
}
pacman::p_load(
  tidyverse,
  kableExtra, 
  flextable,
  glue,
  ggplot2
)
options(scipen=999)
```
## Import Data
I import the CSV file data named “Number of people with and without energy access (OWID based on World Bank, 2021).csv” into R, storing it in the energy_access_data variable. 
```{r}
energy_access_data <- read.csv("Number of people with and without energy access (OWID based on World Bank, 2021).csv", header = TRUE)
```
## Data Exploration
I tried to load the skimr, dplyr, and tidyr libraries to facilitate data exploration, manipulation, and give myself a clearer idea of what this data is about.
```{r}
library(skimr)  # Load the data exploration package
library(dplyr)
library(tidyr)
skim(energy_access_data)  # Get data overview
str(energy_access_data)  # Display data structure
head(energy_access_data)  # Show the first few rows of data
summary(energy_access_data)  # Overview statistics
```
## Interpretation of the Descriptive Statistics
The descriptive statistics reveal stark disparities in global energy access. Electricity access ranges widely, with some regions having near-universal coverage (up to 6.9 billion people), while others have very limited access, as indicated by the median of around 5.4 million but a skewed mean of 199 million. Similarly, clean fuel access shows substantial variability, with a median of about 5.1 million people with access but a mean of 158 million, indicating a few regions with very high access skewing the average. 

However, this result is not reliable because I have not fully cleaned the data. I will analyse it again in the following sections when I've fully done the data cleaning part.

## Check for Missing Values
In this section, I checked the dataset for missing values, because I thought there had to be some tricky data that required me to do something about it. 
```{r}
missing_values <- energy_access_data %>%
  summarise(across(everything(), ~ sum(is.na(.))))
print("Number of missing values in each column:")
print(missing_values)
skim(energy_access_data)
```
## Data Types and Unique Value Counts
Next, I wanted to confirm the data types of all columns and determine how diverse the entries were within each column. This helps reveal whether some columns need to be converted to other data types and identifies any inconsistencies or outliers.
```{r}
data_types <- energy_access_data %>%
  summarise(across(everything(), ~ class(.)))
unique_counts <- energy_access_data %>%
  summarise(across(everything(), ~ length(unique(.))))
print("Data types for each column:")
print(data_types)
print("Unique value count for each column:")
print(unique_counts)
unique_entities <- unique(energy_access_data$Entity)
print(unique_entities)
```
## Removing Unnecessary Regions and International Organizations
To focus my analysis solely on individual countries, I filterted out entities that were not representative of distinct national units. These unnecessary entities included aggregate regions, demographic groupings, and international organisations.
```{r}
filter_entities <- function(data, entities_to_remove) {
  filtered_data <- data %>%
    filter(!Entity %in% entities_to_remove)  # Filter out unselected entities
  return(filtered_data)
}

entities_to_remove <- c(
  "Africa Eastern and Southern", "Africa Western and Central", "Arab World",
  "Caribbean Small States", "Central Europe and the Baltics", "Early-demographic dividend",
  "East Asia & Pacific", "East Asia & Pacific (excluding high income)", "East Asia & Pacific (IDA & IBRD)",
  "Euro area", "Europe & Central Asia", "Europe & Central Asia (excluding high income)", 
  "Europe & Central Asia (IDA & IBRD)", "European Union", "Fragile and conflict affected situations", 
  "Heavily indebted poor countries (HIPC)", "High income", "IBRD only", "IDA & IBRD total", 
  "IDA blend", "IDA only", "IDA total", "Late-demographic dividend", "Latin America & Caribbean", 
  "Latin America & Caribbean (excluding high income)", "Latin America & Caribbean (IDA & IBRD)",
  "Least developed countries: UN classification", "Low & middle income", "Low income", "Lower middle income",
  "Middle East & North Africa", "Middle East & North Africa (excluding high income)", 
  "Middle East & North Africa (IDA & IBRD)", "Middle income", "North America", "OECD members", 
  "Other small states", "Pacific island small states", "Post-demographic dividend", 
  "Pre-demographic dividend", "Small states", "South Asia", "South Asia (IDA & IBRD)",
  "Sub-Saharan Africa", "Sub-Saharan Africa (excluding high income)", "Sub-Saharan Africa (IDA & IBRD)",
  "Upper middle income", "World"
)
filtered_data <- filter_entities(energy_access_data, entities_to_remove)
```
## Calculating Descriptive Statistics for Numeric Columns Again with Filtered Data
To better understand the numeric variables in my dataset, I defined a function called calculate_statistics(), which calculates basic descriptive statistics for each numeric column. These statistics include the mean, standard deviation, minimum, maximum, and median.
```{r}
calculate_statistics <- function(data) {
  numeric_columns <- data %>% select(-c(1, 2)) %>% select(where(is.numeric))
  stats_list <- list()
  for (col in names(numeric_columns)) {
    filtered_col <- numeric_columns[[col]] %>% na.omit() %>% .[. != 0]
    stats <- list(
      mean = mean(filtered_col),
      sd = sd(filtered_col),
      min = min(filtered_col),
      max = max(filtered_col),
      median = median(filtered_col)
    )
    stats_list[[col]] <- stats
  }
  return(stats_list)
}
stats <- calculate_statistics(filtered_data)
print(stats)
```
## Handling Missing Values
This part took me a few days. But luckily I made it in the end. 

I implemented a function called handle_missing_values() to handle missing, zero, and empty values in the dataset. By automating the replacement of missing values with calculated means or default values, this function allows me to make data more robust but also maintained consistency across different steps of the analysis. It saved time compared to manually addressing each instance of missing data and guaranteed that the same logic was applied throughout. 
```{r}
handle_missing_values <- function(data) {
  grouped_data <- data %>% group_by(Entity)
  means <- grouped_data %>% 
    summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE)), .groups = 'drop')
  clean_data <- grouped_data %>%
    mutate(across(where(is.numeric), ~ {
      col_name <- cur_column()
      ifelse(is.na(.) | . == 0, means[[col_name]][match(Entity, means$Entity)], .)
    })) %>%
    mutate(across(where(is.character), ~ ifelse(is.na(.) | trimws(.) == "", "Default Value", .))) 
  
  return(clean_data)
}

filtered_data_no_na <- handle_missing_values(filtered_data)
head(filtered_data_no_na) 
```
## Secondary Data Cleaning
To further ensure data quality, I created a function called filter_data() to perform additional cleaning steps beyond filling missing and zero values. 

By encapsulating this process in a function, I ensured that these specific filtering criteria could be systematically applied whenever necessary, which improved both the efficiency and reproducibility of my workflow. 
```{r}
filter_data <- function(data) {
  data <- na.omit(data)
  data <- data[rowSums(data == 0) == 0, ]
  data <- data[rowSums(data < 100) == 0, ]
  return(data)
}

filtered_data_no_na <- filter_data(filtered_data_no_na)

output_file <- "cleaned_data.csv"
write.csv(filtered_data_no_na, file = output_file, row.names = FALSE)
```

## Descriptive Statistics Calculation
In this step, I calculated key descriptive statistics for all numeric columns in the dataset. These statistics include: Mean, Median, Standard Deviation (sd), Minimum (min) and Maximum (max). I used na.rm = TRUE to ensure that any missing values are ignored during these calculations, making the statistics more accurate. 
```{r}
descriptive_stats <- filtered_data_no_na %>%
  summarise(across(where(is.numeric), list(
    mean = ~ mean(., na.rm = TRUE),  
    median = ~ median(., na.rm = TRUE),  
    sd = ~ sd(., na.rm = TRUE),  
    min = ~ min(., na.rm = TRUE),  
    max = ~ max(., na.rm = TRUE)  
  )))
print("Descriptive statistics for numeric columns:")
print(descriptive_stats)
```
## Selecting and Renaming Columns
In this section, I refined the dataset by selecting the columns that are relevant for analysis, specifically focusing on variables related to energy and clean fuels access. I then renamed these columns to more concise names for clarity. 
```{r}
selected_data <- filtered_data_no_na %>%
  select(
    Entity, 
    Year, 
    Number.of.people.with.access.to.electricity,
    Number.of.people.without.access.to.electricity,
    number_with_clean_fuels_cooking,
    number_without_clean_fuels_cooking
  ) %>%
  rename(
    Country = Entity,  # Rename to Country
    Year = Year,
    Electricity = Number.of.people.with.access.to.electricity,
    No_Electricity = Number.of.people.without.access.to.electricity,
    Clean_Fuels = number_with_clean_fuels_cooking,
    No_Clean_Fuels = number_without_clean_fuels_cooking
  )
```

## Processing Data: Reshaping for Analysis
Here, I defined a function called process_data to perform additional data manipulation. The function first selects specific variables of interest, and then creates new variables.
```{r}
process_data <- function(df) {

  selected_data <- df %>%
    select(Country, Year, Electricity, No_Electricity, Clean_Fuels, No_Clean_Fuels)

  new_variable_data <- selected_data %>%
    mutate(Total_Population = Electricity + No_Electricity)
  
  reshaped_data <- new_variable_data %>%
    pivot_longer(
      cols = c(Electricity, No_Electricity, Clean_Fuels, No_Clean_Fuels, Total_Population),
      names_to = "Variable",
      values_to = "Value"
    )
  
  return(reshaped_data)
}

reshaped_data<- process_data(selected_data)

print(head(reshaped_data))
```
## Calculating Access Rates and Selecting Latest Data
In this step, I calculated two important metrics: Electricity Access Rate and Clean Fuels Access Rate for each country. These rates are computed as the proportion of people with access to electricity or clean fuels out of the total population, while handling cases where total population or access is zero to prevent division errors.
```{r}
# Calculate electricity access rate
selected_data <- selected_data %>%
  mutate(
    Electricity_Access_Rate = if_else((Electricity + No_Electricity) == 0 | Electricity == 0, NA_real_, Electricity / (Electricity + No_Electricity)),
    Clean_Fuels_Access_Rate = if_else((Clean_Fuels + No_Clean_Fuels) == 0 | Clean_Fuels == 0, NA_real_, Clean_Fuels / (Clean_Fuels + No_Clean_Fuels))
  )

# Select the latest year data for each country
latest_data <- selected_data %>%
  group_by(Country) %>%
  filter(Year == max(Year)) %>%
  ungroup()

head(latest_data)  # View the latest year's data

# Output cleaned data to a CSV file
output_file <- "cleaned_data_2.csv"
write.csv(latest_data, file = output_file, row.names = FALSE)
```
## Visualising Access Rates
To understand the distribution and trends of electricity access rates, I  plotted a histogram showing the distribution of electricity access rate for the latest year available in the dataset. The histogram is particularly useful for visualising the distribution of a continuous variable. 

In this case, the histogram shows that a large number of countries have electricity access rates close to 100%. This is indicated by the tall bar on the right, representing countries with nearly full electricity access for their populations. 

Also, by identifying countries with lower electricity access rates helps pinpoint regions that may require targeted interventions to improve infrastructure and energy distribution.
```{r}
# Plot histogram of electricity access rate
ggplot(latest_data, aes(x = Electricity_Access_Rate)) +
  geom_histogram(binwidth = 0.05, fill = "#76afda", color = "black") +
  labs(
    title = "Distribution of Electricity Access Rate (Latest Year)",
    x = "Electricity Access Rate",
    y = "Frequency"
  )

# Summarize electricity access rate by year
yearly_summary <- selected_data %>%
  group_by(Year) %>%
  summarise(mean_electricity_access_rate = mean(Electricity_Access_Rate, na.rm = TRUE),  # Calculate mean
            mean_clean_fuels_access_rate = mean(Clean_Fuels_Access_Rate, na.rm = TRUE))  # Calculate mean
print(yearly_summary)

# Visualize yearly summary of electricity access rate
plot_summary <- function(data) {
  # Use ggplot2 to plot line chart
  p <- ggplot(data, aes(x = Year)) +
    geom_line(aes(y = mean_electricity_access_rate, color = "Electricity Access Rate"), linetype = "solid", size = 0.75) +
    geom_line(aes(y = mean_clean_fuels_access_rate, color = "Clean Fuels Access Rate"), linetype = "dashed", size = 0.75) +
    labs(title = "Yearly Summary of Electricity Access Rate and Clean Fuels Access Rate",
         x = "Year",
         y = "Access Rate (%)",
         color = "Indicator") +
    theme_minimal() +
    theme(
      legend.position = "bottom",  # Place legend at bottom
      legend.background = element_rect(fill = "transparent")  # Make legend background transparent
    )
  
  # Print chart
  print(p)
  
  # Save chart as a PNG file
  ggsave("yearly_summary_plot.png", plot = p, width = 10, height = 6, units = "in")
}

plot_summary(yearly_summary)
```
## Choice of Line Chart
I chose to do a line chart above because it is well-suited for visualizing changes in a variable over time. The chart reveals that the electricity access rate has shown a steady upward trend, indicating improved access to electricity globally.
The disparity in trends implies that efforts to expand clean fuel access might need more attention compared to electricity access, particularly as clean fuel access is essential for health and environmental reasons. 

## Scatter Plot Analysis
To better visualise the top and bottom countries in terms of clean fuels and electricity access rates, I created scatter plots, which are effective for displaying individual data points and allow for easy comparison of specific metrics across categories—in this case, countries. This specific breakdown enables a direct comparison, making it easy to pinpoint countries that have achieved near-universal access and those that face critical shortages.
```{r}
# Define function to plot scatter plot
plot_scatter <- function(data, x_column, y_column, top_n_countries = 10, width = 15, height = 8, output_file = NULL, ascending = FALSE) {
  if (ascending) {
    data <- data %>%
      arrange(!!sym(y_column)) %>% 
      head(top_n_countries)  # Sort in ascending order
  } else {
    data <- data %>%
      arrange(desc(!!sym(y_column))) %>% 
      head(top_n_countries)  # Sort in descending order
  }
  
  p <- ggplot(data, aes(x = !!sym(x_column), y = !!sym(y_column))) +
    geom_point(size = 4, color = "steelblue") +  # Plot scatter plot
    geom_text(aes(label = round(!!sym(y_column), 2)), vjust = -0.3) +  # Add data labels
    labs(
      title = paste(y_column, "by", x_column, if (ascending) {
        "\n(Top 50 countries with lowest access rate)"
      } else {
        "\n(Top 50 countries with highest access rate)"
      }),
      x = x_column,
      y = y_column
    ) +
    theme_minimal() +  # Use minimal theme
    theme(
      axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis labels
    ) +
    ylim(0, 1)  # Set y-axis range
  
  if (!is.null(output_file)) {
    if (file.exists(dirname(output_file))) {
      ggsave(output_file, plot = p, width = width, height = height)  # Save image
      message("Image saved to: ", output_file)
    } else {
      warning("Output directory does not exist: ", dirname(output_file))
    }
  }
  
  print(p)  # Print image
}

# Save plot examples
plot_scatter(latest_data, "Country", "Clean_Fuels_Access_Rate", top_n_countries = 50, output_file = "clean_fuels_top_50.png")
plot_scatter(latest_data, "Country", "Electricity_Access_Rate", top_n_countries = 50, output_file = "electricity_top_50.png")
plot_scatter(latest_data, "Country", "Clean_Fuels_Access_Rate", top_n_countries = 50, ascending = TRUE, output_file = "clean_fuels_bottom_50.png")
plot_scatter(latest_data, "Country", "Electricity_Access_Rate", top_n_countries = 50, ascending = TRUE, output_file = "electricity_bottom_50.png")
```
## Bar Chart Visualisation of Access Rates
I developed a function called plot_bar() to visualize the top 10 countries with both the highest and lowest access rates for electricity and clean fuels. The bar chart format is ideal for comparing categories, making me easy to rank countries by their access rates and clearly display differences between them. This focused comparison provides a visual hierarchy, helping me to identify countries that lead in energy access and those with critical gaps, supporting targeted policy interventions to bridge these disparities.
```{r}
# Visualize the top 10 countries with the highest electricity access rate
plot_bar <- function(data, x_column, y_column, top_n_countries = 10, width = 15, height = 8, output_file = NULL, ascending = FALSE) {
  if (ascending) {
    data <- data %>%
      arrange(!!sym(y_column)) %>% 
      head(top_n_countries)  # Sort in ascending order
  } else {
    data <- data %>%
      arrange(desc(!!sym(y_column))) %>% 
      head(top_n_countries)  # Sort in descending order
  }
  data[[x_column]] <- factor(data[[x_column]], levels = data[[x_column]])  # Convert x-axis to factor
  p <- ggplot(data, aes(x = !!sym(x_column), y = !!sym(y_column))) +
    geom_bar(stat = "identity", fill = "steelblue") +  # Plot bar chart
    geom_text(aes(label = round(!!sym(y_column), 2)), vjust = -0.3) +  # Add data labels
    labs(
      title = paste(y_column, "by", x_column, if (ascending) {
        "\n(Top 10 countries with lowest access rate)"
      } else {
        "\n(Top 10 countries with highest access rate)"
      }, y_column, ")"),
      x = x_column,
      y = y_column
    ) +
    theme_minimal() +  # Use minimal theme
    theme(
      axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis labels
    ) +
    ylim(0, 1)  # Set y-axis range
  if (!is.null(output_file)) {
    ggsave(output_file, plot = p, width = width, height = height)  # Save image
  }
  
  print(p)  # Print image
}

# Plot visualizations for the countries with the highest electricity access rate
plot_bar(latest_data, "Country", "Clean_Fuels_Access_Rate", top_n_countries = 10)  # Highest clean fuel access rate countries
plot_bar(latest_data, "Country", "Electricity_Access_Rate", top_n_countries = 10)  # Highest electricity access rate countries
plot_bar(latest_data, "Country", "Clean_Fuels_Access_Rate", top_n_countries = 10, ascending = TRUE)  # Lowest clean fuel access rate countries
plot_bar(latest_data, "Country", "Electricity_Access_Rate", top_n_countries = 10, ascending = TRUE)  # Lowest electricity access rate countries
```
## Critical Engagement with AI
Throughout my SOCS0100 project, I utilised ChatGPT as a collaborative tool to refine data wrangling and visualisation code. Its assistance was instrumental in simplifying complex coding challenges, often offering insightful suggestions that made the code more efficient and readable.

For example, when dealing with the raw data, I was initially unsure whether to delete rows with irrelevant or missing values or to impute them using mean or median. After some conversations with ChatGPT, its guidance helped me decide on the best approach, resulting in a cleaner workflow.

In evaluating ChatGPT’s contributions, I found its value lay in iterative code improvement and proposing innovative solutions. However, its limitations became apparent in understanding the specific context of my energy dataset or handling nuanced tasks that required human intuition. Despite these challenges, it spurred me to think more deeply about my code’s structure and logic, ultimately making my approach more robust.

Reflecting on this experience, ChatGPT positively impacted my assessment by providing prompt support during moments of uncertainty, which boosted my confidence in tackling complex aspects of the project. Its involvement led to a more streamlined approach to data analysis, contributing meaningfully to my overall learning experience at SOCS0100 course.

## Words count: 1498
